// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  nickname          String
  image             String? // 추가
  encryptedPassword String
  products          Product[]
  comments          Comment[]
  likes             Like[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt // 자동 업데이트되는 필드 추가
  articles          Article[]
  articleLikes      ArticleLike[]
  articleComments   ArticleComment[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Int
  images      String[] // 여러 이미지 경로
  tags        String[]
  likes       Like[]
  comments    Comment[]
  ownerId     Int
  owner       User      @relation(fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Article {
  id        Int              @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  likes     ArticleLike[]
  comments  ArticleComment[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model ArticleLike {
  id        Int     @id @default(autoincrement())
  userId    Int
  articleId Int
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  articleId Int
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
}
