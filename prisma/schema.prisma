// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  nickname          String
  image             String?
  encryptedPassword String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  comment           Comment[]
  Favorite          Favorite[]
  Product           Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @default("")
  price       Int
  tags        String[] @default([])
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author          User?      @relation(fields: [authorId], references: [id])
  authorId        Int?
  ProductComments Comment[]
  favorites       Favorite[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  Article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?

  @@unique([userId, productId])
}

model Article {
  id              Int        @id @default(autoincrement())
  title           String
  content         String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  ArticleComments Comment[]
  favorites       Favorite[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
