// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  nickName     String   @unique
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products        Product[]        @relation("UserProducts")
  favorites       Favorite[]
  productComments ProductComment[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  price         Float
  tags          String[]
  images        String[]
  favoriteCount Int      @default(0)
  owner         User     @relation("UserProducts", fields: [ownerId], references: [id])
  ownerId       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  favorites       Favorite[]
  productComments ProductComment[]
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  writer User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Favorite {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
