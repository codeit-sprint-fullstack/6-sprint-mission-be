generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자
model User {
  id                String @id @default(uuid())
  email             String @unique
  encryptedPassword String
  nickname          String
  //   products          Product[]
  //   productLikes      ProductLike[]
  //   productComments   ProductComment[]
  //   articles          Article[]
  //   articleComments   ArticleComment[]
}

// 상품
model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  price           Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // user            User             @relation(fields: [userId], references: [id], onDelete: SetNull)
  // userId          String
  productLikes    ProductLike[]
  productComments ProductComment[]
  productTags     ProductTag[]
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  productTags ProductTag[]
}

model ProductTag {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int

  @@unique([productId, tagId])
}

// 상품 댓글
model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  // author    User     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  // authorId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// 상품 좋아요(중고마켓 & 유저 연결)
model ProductLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  // user      User     @relation(fields: [userId], references: [id], onDelete: SetNull)
  // userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// 자유 게시판
model Article {
  id              Int              @id @default(autoincrement())
  title           String
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // author          User             @relation(fields: [authorId], references: [id], onDelete: SetNull)
  // authorId        String
  articleComments ArticleComment[]
}

// 자유 게시판 댓글
model ArticleComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  // author    User     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  // authorId  String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}
