generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자
// model User {
//   id                String           @id @default(uuid())
//   email             String           @unique
//   encryptedPassword String
//   nickname          String
//   products          Product[]
//   productLikes      ProductLike[]
//   productComments   ProductComment[]
//   articles          Article[]
//   articleComments   ArticleComment[]
// }

// 상품
model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  price           Int
  tags            String
  // user            User             @relation(fields: [userId], references: [id])
  // userId          String
  productLikes    ProductLike[]
  productComments ProductComment[]
}

// 상품 댓글
model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  // author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  // authorId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// 상품 좋아요(중고마켓 & 유저 연결)
model ProductLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// 자유 게시판
model Article {
  id              Int              @id @default(autoincrement())
  title           String
  content         String
  creatdAt        DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  // authorId        String
  articleComments ArticleComment[]
}

// 자유 게시판 댓글
model ArticleComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  // author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  // authorId  String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}
