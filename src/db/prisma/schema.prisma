generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String   @unique
  password        String?
  refreshToken    String?
  profileImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  articles    Article[]
  products    Product[]
  comments    Comment[]
  ProductLike ProductLike[]
  ArticleLike ArticleLike[]
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  comments    Comment[]
  ArticleLike ArticleLike[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  price         Int
  tags          String[]
  images        String?
  favoriteCount Int      @default(0)
  createdAt     DateTime @default(now())

  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  Comment     Comment[]
  ProductLike ProductLike[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
}

model ArticleLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())

  @@unique([userId, articleId]) // 유저당 하나만 허용
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
